#' _Control+Shift+K_ (_Command+Shift+K_ on macOS).
#'
#+ setup_options, include=FALSE
# This is an example of a code chunk contains options that you don't want to
# appear in the rendered text:
knitr::opts_chunk$set(comment=NA) # suppresses '## ' in output
library(spida2)
library(magrittr)
#' (evaluating) the chunk when you use Crtl-Shift-K to produce an output file.
#' We assume that all packages have already been installed interactively before
#' using Crtl-Shift-K.
#'
#' If you haven't installed the following packages yet, this is an opportunity
#' to do so. You must run these lines 'manually' by using Ctrl-Enter with the
#' cursor on the line.
#'
#+ eval=FALSE
# These lines will not be run when you render the script with Ctrl-Shift-K
install.packages('devtools')
install.packages("devtools")
#'
#' While we are at it we can install a few more packages from
#' CRAN:
#'
#+ eval=FALSE
install.packages(c("car", "effects", "ggplot2", "Hmisc"))
install.packages(c("car", "effects", "ggplot2", "Hmisc"))
install.packages(c("knitr", "magrittr", "rgl", "rio", "rmarkdown", "readxl", "cv"))
install.packages(c("knitr", "magrittr", "rgl", "rio", "rmarkdown", "readxl", "cv"))
install.packages(c("latticeExtra"))
install.packages('kableExtra')
devtools::install_github('gmonette/spida2')
# devtools::install_github('gmonette/spida2')
# devtools::install_github('gmonette/p3d')
#'
#' I expect these packages to be updated frequently during the course
#' and you need to re-install
#' them to have access to the latest versions.
#'
#' Each time you use R, you need to load the packages you need
#' for that session with the 'library' command:
#'
library(car)
library(spida2)
library(lattice)
library(latticeExtra)
#' ## Reading data in a text file
#'
#' The easiest formats to read are CSV files (comma-separated-value files
#' which are easily created from Excel by saving a spreadsheet as
#' a CSV file), and tab-delimited text files, usually with a
#' '.txt' extension.
#'
#' You need to know the location of the file relative to the script file.
#'
#' Be sure to set the working directory, which you can find with
getwd()
#' data set to a collaborator and they will be able to run the script
#' after saving the script and the data set in a directory on their
#' own computer.
#'
#' To illustrate, we will download a data file and use for a
#' brief exploration,
#'
#+ eval=FALSE
# You only need to download once, so this is in a code chunk that
# will not be run when you use Ctrl-Shift-K to render the file.
download.file("http://john-fox.ca/AppliedRegression/datasets/Titanic.txt",
"Titanic.txt")
#' This copies the file 'Titanic.txt' into the working directory.
#' This file is a list of passengers on the Titanic and does
#' not include the crew.
#'
#' Note that all the data sets from the textbook can be downloaded
#' this way. However, it is better to create a 'data' subdirectory
#' and download them there.
list.files()
#'
#' You can also read a text file from the internet by using the URL
#' but then you need to be connected to the internet whenever you
#' read the file.
titanic <- read.table("Titanic.txt", header = T)
library(spida2)
library(lattice)
head(titanic)  # first 6 lines
tail(titanic)  # last 6 lines
dim(titanic)   # rows and columns
xqplot(titanic)
#
# frequency table
#
tab(titanic, ~ survived + sex + passengerClass)
#
# percentage within each 'sex by passengerClass' grouping
#
tab(titanic, ~ survived + sex + passengerClass, pct = c(2,3))
# nicer:
tab(titanic, ~ survived + sex + passengerClass, pct = c(2,3))  %>%
round(1)
#' Note that the '%>%' operator 'pipes' the output of the left-hand side (lhs)
#' as the first argument of the function on the right.
#'
#' In RStudio, you can type '%>%' by pressing _Control-Shift-M_.
#'
#' ## Visualizing frequencies
#'
#'
#' ### Barchart of frequencies
#'
tab(titanic, ~ survived + sex + passengerClass)
tab(titanic, ~ survived + sex + passengerClass)  %>%
barchart(auto.key=T)
#'
#' ### Get rid of 'Total'
#'
#' Using `tab_` instead of `tab` suppresses the "Total" margin which we don't want to display
#' since it is redundant in the graph. Using `tab__` suppresses both the "Total" margin the
#' the "All" margin in conditional tables generated by using the arguments `pct` or `pr`.
#'
tab_(titanic, ~ survived + sex + passengerClass)
install.packages('rstan')
remove.packages("rstan")
install.packages("RcppParallel")
install.packages("loo")
install.packages("QuickJSR")
install.packages("BH")
d
tempdir()
R.version.string
chooseCRANmirror(graphics = FALSE)
install.packages("RcppParallel")
install.packages("RcppParallel", type = "source")
install.packages("rstan", type = "source")
library(rstan)
# Example model
model_code <- "
data {
int<lower=0> N;
real y[N];
}
parameters {
real mu;
}
model {
y ~ normal(mu, 1);
}
"
# Simulated data
stan_data <- list(N = 10, y = rnorm(10))
# Fit model
fit <- stan(model_code = model_code, data = stan_data, iter = 100, chains = 2)
print(fit)
devtools::install_github('gmonette/spida2')
devtools::install_github('gmonette/spida2')
unlink(tempdir(), recursive = TRUE)
unlink(tempdir(), recursive = TRUE)
devtools::install_github('gmonette/spida2')
.libPaths("D:/Daniel/R-lib")
devtools::install_github('gmonette/spida2', lib = "D:/Daniel/R-lib")
Sys.setenv(TMPDIR = "D:/Daniel/R-temp")
devtools::install_github('gmonette/spida2', lib = "D:/Daniel/R-lib")
devtools::install_github('gmonette/spida2', lib = "D:/Daniel/R-lib")
devtools::install_github('gmonette/spida2')
devtools::install_github('gmonette/spida2')
install.packages("d:\Daniel\Downlads\spida2-master", repos = NULL, type = "source")
install.packages("C:\Daniel\Downlads\spida2-master", repos = NULL, type = "source")
install.packages("d:/Daniel/Downloads/spida2-master", repos = NULL, type = "source")
library(spida2)
install.packages("d:/Daniel/Downloads/p3d-master", repos = NULL, type = "source")
library(p3d)
#'
#' This will install a number of packages and download a data file.
#'
#' After executing the file line by line you should be able to
#' 'render' it to create a stand-alone HTML file by pressing
#' _Control+Shift+K_ (_Command+Shift+K_ on macOS).
#'
#+ setup_options, include=FALSE
# This is an example of a code chunk contains options that you don't want to
# appear in the rendered text:
knitr::opts_chunk$set(comment=NA) # suppresses '## ' in output
library(spida2)
library(magrittr)
#' (evaluating) the chunk when you use Crtl-Shift-K to produce an output file.
#' We assume that all packages have already been installed interactively before
#' using Crtl-Shift-K.
#'
#' If you haven't installed the following packages yet, this is an opportunity
#' to do so. You must run these lines 'manually' by using Ctrl-Enter with the
#' cursor on the line.
#'
#+ eval=FALSE
# These lines will not be run when you render the script with Ctrl-Shift-K
install.packages('devtools')
install.packages("devtools")
#'
#' While we are at it we can install a few more packages from
#' CRAN:
#'
#+ eval=FALSE
install.packages(c("car", "effects", "ggplot2", "Hmisc"))
install.packages(c("car", "effects", "ggplot2", "Hmisc"))
install.packages(c("knitr", "magrittr", "rgl", "rio", "rmarkdown", "readxl", "cv"))
install.packages(c("knitr", "magrittr", "rgl", "rio", "rmarkdown", "readxl", "cv"))
install.packages(c("latticeExtra"))
install.packages('kableExtra')
devtools::install_github('gmonette/spida2')
#'
#' Installing packages only needs to be done once every
#' time you install a new version of R. You can
#' update them occasionally, with:
#'
#+ eval=FALSE
update.packages()
# devtools::install_github('gmonette/spida2')
# devtools::install_github('gmonette/p3d')
#'
#' I expect these packages to be updated frequently during the course
#' and you need to re-install
#' them to have access to the latest versions.
#'
#' Each time you use R, you need to load the packages you need
#' for that session with the 'library' command:
#'
library(car)
library(spida2)
library(lattice)
library(latticeExtra)
#' ## Reading data in a text file
#'
#' The easiest formats to read are CSV files (comma-separated-value files
#' which are easily created from Excel by saving a spreadsheet as
#' a CSV file), and tab-delimited text files, usually with a
#' '.txt' extension.
#'
#' You need to know the location of the file relative to the script file.
#'
#' Be sure to set the working directory, which you can find with
getwd()
#' data set to a collaborator and they will be able to run the script
#' after saving the script and the data set in a directory on their
#' own computer.
#'
#' To illustrate, we will download a data file and use for a
#' brief exploration,
#'
#+ eval=FALSE
# You only need to download once, so this is in a code chunk that
# will not be run when you use Ctrl-Shift-K to render the file.
download.file("http://john-fox.ca/AppliedRegression/datasets/Titanic.txt",
"Titanic.txt")
#' This copies the file 'Titanic.txt' into the working directory.
#' This file is a list of passengers on the Titanic and does
#' not include the crew.
#'
#' Note that all the data sets from the textbook can be downloaded
#' this way. However, it is better to create a 'data' subdirectory
#' and download them there.
list.files()
#'
#' You can also read a text file from the internet by using the URL
#' but then you need to be connected to the internet whenever you
#' read the file.
titanic <- read.table("Titanic.txt", header = T)
library(spida2)
library(lattice)
head(titanic)  # first 6 lines
tail(titanic)  # last 6 lines
dim(titanic)   # rows and columns
xqplot(titanic)
#
# frequency table
#
tab(titanic, ~ survived + sex + passengerClass)
#
# percentage within each 'sex by passengerClass' grouping
#
tab(titanic, ~ survived + sex + passengerClass, pct = c(2,3))
# nicer:
tab(titanic, ~ survived + sex + passengerClass, pct = c(2,3))  %>%
round(1)
#' Note that the '%>%' operator 'pipes' the output of the left-hand side (lhs)
#' as the first argument of the function on the right.
#'
#' In RStudio, you can type '%>%' by pressing _Control-Shift-M_.
#'
#' ## Visualizing frequencies
#'
#'
#' ### Barchart of frequencies
#'
tab(titanic, ~ survived + sex + passengerClass)
tab(titanic, ~ survived + sex + passengerClass)  %>%
barchart(auto.key=T)
#'
#' ### Get rid of 'Total'
#'
#' Using `tab_` instead of `tab` suppresses the "Total" margin which we don't want to display
#' since it is redundant in the graph. Using `tab__` suppresses both the "Total" margin the
#' the "All" margin in conditional tables generated by using the arguments `pct` or `pr`.
#'
tab_(titanic, ~ survived + sex + passengerClass)
tab_(titanic, ~ survived + sex + passengerClass)  %>%
barchart(auto.key=T)
gd() # ggplot2-like appearance
tab_(titanic, ~ survived + sex + passengerClass)  %>%
barchart(
auto.key = list(space = 'right', title='Class'),
xlim = c(0, 800))
#' This is not really informative. We want to see the relative proportion of
#' survivors in the different subgroups so we change the order of the variables.
#' Also the labels 'yes' and 'no' are not informative themselves.
#'
#' We change the order of the variables in the formula so the variable we want to
#' see within bars comes last.
#'
#' The first variable generates different bars within panels and the second variable
#' generates the panels.
#'
tab_(titanic, ~  sex + passengerClass + survived)
tab_(titanic, ~  sex + passengerClass + survived)  %>%
barchart(xlab = 'number of passengers',
xlim = c(0,550),
auto.key=list(space='right',title='survived'))
#'
#' But if we want to emphasize proportions we really want proportions
#'
tab_(titanic, ~  sex + passengerClass + survived, pct = c(1,2)) %>%
barchart(xlab = 'percentage of passengers',
auto.key=list(space='right',title='survived'))
#'
#' This shows overall proportions as well as within-gender proportions.
#' To get rid of both 'All' and 'Total'. Use `tab__`
#' instead of `tab`.
#'
tab__(titanic, ~  sex + passengerClass + survived, pct = c(1,2)) %>%
barchart(xlab = 'percentage of passengers', layout = c(1,3),
auto.key=list(space='right',title='survived'))
#'
#' experimenting:
#'
tab__(titanic, ~  sex + passengerClass + survived, pct = c(1,2))
tab__(titanic, ~  sex + passengerClass + survived, pct = c(1,2)) %>%
barchart(ylab = 'percentage of passengers',
horizontal = FALSE,
ylim = c(0,100), layout = c(3,1),
auto.key=list(space='right',title='survived'))
#'
#' Looks wrong because order of colors are different in graph and in legend
#'
tab__(titanic, ~  sex + passengerClass + survived, pct = c(1,2)) %>%
barchart(ylab = 'percentage of passengers',
horizontal = FALSE,
ylim = c(0,100), layout = c(3,1),
scales = list(x=list(rot=45)),
auto.key=list(space='right',title='survived', reverse.rows = T))
#'
#' more experimenting:
#'
tab__(titanic, ~  passengerClass + sex + survived)
gd()
tab__(titanic, ~  passengerClass + sex + survived) %>%
barchart(ylab = 'number of passengers',
ylim = c(0,500),
horizontal = FALSE,
auto.key=list(space='right',title='survived',
reverse.rows=T))
#'
#' Note that 'reverse.rows' get the key to show colors in the same order
#' as in the plot.
#'
tab__(titanic, ~  passengerClass + sex + survived) %>%
barchart(ylab = 'number of passengers',
ylim = c(0,500),
#  box.width = rep(.9^c(2,1,1,1,1,1), each = 2),
box.width = c(1,5,5,.1)/10,
box.ratio = 2, stack = F,
horizontal = FALSE,
auto.key=list(space='right',title='survived', reverse.rows = T))
#'
#'
#' ## Questions
#'
#' ## Questions
#'
#'
#' ## Questions
#'
#' - What are the pros and cons of these various graphs?
#'
#' ## Questions
#'
#' - What are the pros and cons of these various graphs?
#' - Can you find good visualizations of the Titanic data?
#'
#' ## Questions
#'
#' - What are the pros and cons of these various graphs?
#' - Can you find good visualizations of the Titanic data?
#' - What factors make a visualization effective?
#'
#' ## Questions
#'
#' - What are the pros and cons of these various graphs?
#' - Can you find good visualizations of the Titanic data?
#' - What factors make a visualization effective?
#' - You've heard "a picture is worth a thousand words".  But how
#'
#' ## Questions
#'
#' - What are the pros and cons of these various graphs?
#' - Can you find good visualizations of the Titanic data?
#' - What factors make a visualization effective?
#' - You've heard "a picture is worth a thousand words".  But how
#'   about: "a picture is worthless unless it tells a good story."
#'
#' ## Questions
#'
#' - What are the pros and cons of these various graphs?
#' - Can you find good visualizations of the Titanic data?
#' - What factors make a visualization effective?
#' - You've heard "a picture is worth a thousand words".  But how
#'   about: "a picture is worthless unless it tells a good story."
#'   Do any of these plots tell a good story?
#'
#' ## Questions
#'
#' - What are the pros and cons of these various graphs?
#' - Can you find good visualizations of the Titanic data?
#' - What factors make a visualization effective?
#' - You've heard "a picture is worth a thousand words".  But how
#'   about: "a picture is worthless unless it tells a good story."
#'   Do any of these plots tell a good story?
#' - What factors detract from the effectiveness of a visualization?
#' ## Questions
#'
#' - What are the pros and cons of these various graphs?
#' - Can you find good visualizations of the Titanic data?
#' - What factors make a visualization effective?
#' - You've heard "a picture is worth a thousand words".  But how
#'   about: "a picture is worthless unless it tells a good story."
#'   Do any of these plots tell a good story?
#' - What factors detract from the effectiveness of a visualization?
#' - Can you think of ways of presenting this data that would be more effective
#'
#' - What are the pros and cons of these various graphs?
#' - Can you find good visualizations of the Titanic data?
#' - What factors make a visualization effective?
#' - You've heard "a picture is worth a thousand words".  But how
#'   about: "a picture is worthless unless it tells a good story."
#'   Do any of these plots tell a good story?
#' - What factors detract from the effectiveness of a visualization?
#' - Can you think of ways of presenting this data that would be more effective
#'   than the ones above?
#' - What are the pros and cons of these various graphs?
#' - Can you find good visualizations of the Titanic data?
#' - What factors make a visualization effective?
#' - You've heard "a picture is worth a thousand words".  But how
#'   about: "a picture is worthless unless it tells a good story."
#'   Do any of these plots tell a good story?
#' - What factors detract from the effectiveness of a visualization?
#' - Can you think of ways of presenting this data that would be more effective
#'   than the ones above?
#' - If you are familiar with 'ggplot2', use it to present this data?
sd <- sqrt(15)
sd
L <- rnorm(1000, sd^2)
L
L <- rnorm(1000, sd = sd^2)
L
L <- rnorm(1000, 50, 15)
L
L <- rnorm(1000, mean = 50, sd = sd^2)
L
eps_1 <- rnorm(1000, mean = 0, sd = sd_two^2)
sd_two <- sqrt(15)
eps_1 <- rnorm(1000, mean = 0, sd = sd_two^2)
eps_1
Y_1 <- L + eps_1
Y_1
sd <- sqrt(20)
sd
L <- rnorm(1000, mean = 50, sd = sd)
L
sd_two <- sqrt(15)
eps_1 <- rnorm(1000, mean = 0, sd = sd_two)
eps_1
Y_1 <- L + eps_1
Y_1
summary(Y_1)
eps_2 <- rnorm(1000, mean = 0, sd = sd_two)
eps_2
Y_2 <- L + eps_2
Y_2
summary(Y_2)
sd <- sqrt(20)
sd <- sqrt(20)
sd
L <- rnorm(1000, mean = 50, sd = sd)
L
summary(L)
sd_two <- sqrt(15)
eps_1 <- rnorm(1000, mean = 0, sd = sd_two)
eps_1
Y_1 <- L + eps_1
Y_1
summary(Y_1)
eps_2 <- rnorm(1000, mean = 0, sd = sd_two)
eps_2
Y_2 <- L + eps_2
Y_2
summary(Y_2)
