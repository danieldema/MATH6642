panel.lines(x[ord], fit_vals[ord], col = "blue", lwd = 2)
})
#These visualizations reaffirm that so far, fit5 is the "best" model
#GROUPING BY CDR, VISUALIZATIONS: PART 1
#-------------------------------------------------------------------------------
dc_0 <- subset(dc_orig, CDR == 0)
dc_0.5 <- subset(dc_orig, CDR == 0.5)
dc_1 <- subset(dc_orig, CDR == 1)
dc$fit_vals2 <- fitted(fit2)
dc$fit_vals3 <- fitted(fit3)
dc$fit_vals5 <- fitted(fit5)
xqplot(dc)
xyplot(MMSE ~ Age | factor(CDR), data = dc,
type = "p",
xlab = "Age",
ylab = "MMSE",
main = "Observed and Fitted MMSE Trajectories Grouped by CDR",
panel = function(x, y, subscripts, ...) {
current_ids <- dc$Subject.ID[subscripts]
unique_ids <- unique(current_ids)
for (id in unique_ids) {
idx <- which(current_ids == id)
ord <- order(x[idx])
x_ord <- x[idx][ord]
y_ord <- y[idx][ord]
fit_ord <- dc$fit_vals2[subscripts][idx][ord]
panel.xyplot(x_ord, y_ord, col = "black", pch = 16)
panel.lines(x_ord, fit_ord, col = "blue", lwd = 1.5)
}
})
xyplot(MMSE ~ Age | factor(CDR), data = dc,
type = "p",
xlab = "Age",
ylab = "MMSE",
main = "Observed and Fitted MMSE Trajectories Grouped by CDR",
panel = function(x, y, subscripts, ...) {
current_ids <- dc$Subject.ID[subscripts]
unique_ids <- unique(current_ids)
for (id in unique_ids) {
idx <- which(current_ids == id)
ord <- order(x[idx])
x_ord <- x[idx][ord]
y_ord <- y[idx][ord]
fit_ord <- dc$fit_vals3[subscripts][idx][ord]
panel.xyplot(x_ord, y_ord, col = "black", pch = 16)
panel.lines(x_ord, fit_ord, col = "blue", lwd = 1.5)
}
})
xyplot(MMSE ~ Age | factor(CDR), data = dc,
type = "p",
xlab = "Age",
ylab = "MMSE",
main = "Observed and Fitted MMSE Trajectories Grouped by CDR",
panel = function(x, y, subscripts, ...) {
current_ids <- dc$Subject.ID[subscripts]
unique_ids <- unique(current_ids)
for (id in unique_ids) {
idx <- which(current_ids == id)
ord <- order(x[idx])
x_ord <- x[idx][ord]
y_ord <- y[idx][ord]
fit_ord <- dc$fit_vals5[subscripts][idx][ord]
panel.xyplot(x_ord, y_ord, col = "black", pch = 16)
panel.lines(x_ord, fit_ord, col = "blue", lwd = 1.5)
}
})
#DIAGNOSTICS FOR G-MATRIX
#-------------------------------------------------------------------------------
summary(fit2)
summary(fit3)
summary(fit5)
#G-matrix: correlation close to -1, high stddev for nWBV
#NEEDS TO BE FIGURED OUT
#try: centering
test <- lme(MMSE ~ nWBV + Age + SES + nWBV * SES + Age * SES,
data = dc,
random = ~ 1 + dvar(nWBV, Subject.ID) | Subject.ID,
correlation = corAR1(form = ~ 1 | Subject.ID),
control = lmeControl(opt = "optim", maxIter = 200, msMaxIter = 200))
summary(test)
anova(fit5, test)
dc$test <- fitted(test)
xqplot(dc)
#model is worse but, corr goes down, stddev goes up. try dropping nWBV?
test <- lme(MMSE ~ nWBV + Age + SES + nWBV * SES + Age * SES,
data = dc,
random = ~ 1 | Subject.ID,
correlation = corAR1(form = ~ 1 | Subject.ID),
control = lmeControl(opt = "optim", maxIter = 200, msMaxIter = 200))
summary(test)
anova(fit5, test)
dc$test <- fitted(test)
xqplot(dc)
#low p-value - maybe try re-introducing age and then center?
test <- lme(MMSE ~ nWBV + Age + SES + nWBV * SES + Age * SES,
data = dc,
random = ~ 1 + Age | Subject.ID,
correlation = corAR1(form = ~ 1 | Subject.ID),
control = lmeControl(opt = "optim", maxIter = 200, msMaxIter = 200))
summary(test)
anova(fit5, test)
#corr is close to 0, AIC goes up
dc$test <- fitted(test)
xqplot(dc)
test <- lme(MMSE ~ nWBV + Age + SES + nWBV * SES + Age * SES,
data = dc,
random = ~ 1 + dvar(Age, Subject.ID) | Subject.ID,
correlation = corAR1(form = ~ 1 | Subject.ID),
control = lmeControl(opt = "optim", maxIter = 200, msMaxIter = 200))
summary(test)
anova(fit5, test)
#corr goes up close to 1, AIC goes up
dc$test <- fitted(test)
xqplot(dc)
#Model becomes worse, correlation becomes 1 instead of -1 as it was with
#nWBV. Maybe include both Age anD nWBV in random effects?
test <- lme(MMSE ~ nWBV + Age + SES + nWBV * SES + Age * SES,
data = dc,
random = ~ nWBV + Age | Subject.ID,
correlation = corAR1(form = ~ 1 | Subject.ID),
control = lmeControl(opt = "optim", maxIter = 200, msMaxIter = 200))
summary(test)
anova(test, fit5)
#correlation for nWBV goes to -1, correlation for age goes to 0?
#stddevs all go to 0
test <- lme(MMSE ~ nWBV + Age + SES + nWBV * SES + Age * SES,
data = dc,
random = ~ dvar(nWBV, Subject.ID) + dvar(Age, Subject.ID) | Subject.ID,
correlation = corAR1(form = ~ 1 | Subject.ID),
control = lmeControl(opt = "optim", maxIter = 200, msMaxIter = 200))
summary(test)
anova(fit5, test)
#low p-value, fit5 still fits better. correlations are more reasonable but stddev
#for nWBV shoots up
#try removing correlation from fit5?
test <- lme(MMSE ~ nWBV + Age + SES + nWBV * SES + Age * SES,
data = dc,
random = ~ 1 + dvar(nWBV, Subject.ID) | Subject.ID,
control = lmeControl(opt = "optim", maxIter = 200, msMaxIter = 200))
summary(test)
anova(test, fit5)
#fit5 is still preferred...
#try removing correlations from centered model?
test <- lme(MMSE ~ nWBV + Age + SES + nWBV * SES + Age * SES,
data = dc,
random = ~ dvar(nWBV, Subject.ID) + dvar(Age, Subject.ID) | Subject.ID,
control = lmeControl(opt = "optim", maxIter = 200, msMaxIter = 200))
summary(test)
anova(fit5, test)
#fit5 is still preferred, but Age SES interaction is insignificant. What if we
#drop it?
test <- lme(MMSE ~ nWBV + Age + SES + nWBV * SES,
data = dc,
random = ~ dvar(nWBV, Subject.ID) + dvar(Age, Subject.ID) | Subject.ID,
control = lmeControl(opt = "optim", maxIter = 200, msMaxIter = 200))
summary(test)
#ML for anova
fit5_ml <- update(fit5, method = "ML")
test_ml <- update(test, method = "ML")
anova(fit5_ml, test_ml)
#so we still prefer fit5. What if we drop nWBV*SES?
test <- lme(MMSE ~ nWBV + Age + SES,
data = dc,
random = ~ dvar(nWBV, Subject.ID) + dvar(Age, Subject.ID) | Subject.ID,
control = lmeControl(opt = "optim", maxIter = 200, msMaxIter = 200))
summary(test)
#ML for anova
test_ml <- update(test, method = "ML")
anova(fit5_ml, test_ml)
#fit5 is still preferred...
#DIAGNOSTICS WITH RESIDUALS: PART 1
#-------------------------------------------------------------------------------
hist(resid(fit5), main = "Histogram of Residuals (fit5)")
qqnorm(resid(fit5)); qqline(resid(fit5), col = "red")
plot(fit5)
fit5_tmb <- glmmTMB(
MMSE ~ nWBV + Age + SES + nWBV:SES + Age:SES + (1 + nWBV | Subject.ID),
data = dc,
REML = TRUE
)
#No normality in QQ plot, quantile deviations
res <- simulateResiduals(fittedModel = fit5_tmb)
plot(res)
#Square term for Age
fit_age_poly <- glmmTMB(
MMSE ~ poly(Age, 2) + nWBV + SES + nWBV:SES + poly(Age, 2):SES + (1 + nWBV | Subject.ID),
data = dc,
REML = TRUE
)
#Similar issue to fit5
sim_age_poly <- simulateResiduals(fit_age_poly)
plot(sim_age_poly)
dc$nWBV_sq <- dc$nWBV^2
dc$Age_sq <- dc$Age^2
#Square term for nWBV
fit_nwbv_poly_raw <- glmmTMB(
MMSE ~ nWBV + nWBV_sq + Age + SES + nWBV:SES + nWBV_sq:SES + Age:SES + (1 + nWBV | Subject.ID),
data = dc,
REML = TRUE
)
#Same issue with residuals
sim_nwbv_poly <- simulateResiduals(fit_nwbv_poly_raw)
plot(sim_nwbv_poly)
#Drop slope from random effects
fit_simple_re <- glmmTMB(
MMSE ~ nWBV + Age + SES + nWBV:SES + Age:SES + (1 | Subject.ID),
data = dc,
REML = TRUE
)
#Deviations get worse
sim_simple <- simulateResiduals(fit_simple_re)
plot(sim_simple)
#Fit5 better AIC
AIC(fit5_tmb, fit_simple_re)
#Squared nWBV better AIC
AIC(fit_age_poly, fit_nwbv_poly_raw)
#Squared nWBV better AIC
AIC(fit_nwbv_poly_raw, fit5_tmb)
#Squared Age better AIC
AIC(fit_age_poly, fit5_tmb)
#Squared age and squared nWBV
fit_both <- glmmTMB(
MMSE ~ nWBV + nWBV_sq + Age + Age_sq + SES + nWBV:SES + nWBV_sq:SES + Age:SES + (1 + nWBV | Subject.ID),
data = dc,
REML = TRUE
)
#Residuals get worse including both squared terms
sim_both <- simulateResiduals(fit_both)
plot(sim_both)
#AIC is worse than just nWBV
AIC(fit_both, fit_nwbv_poly_raw)
#Including squared nWBV in lme
test <- lme(MMSE ~ nWBV + nWBV_sq + Age + SES + nWBV * SES + Age * SES,
data = dc,
random = ~ 1 + nWBV | Subject.ID,
control = lmeControl(opt = "optim", maxIter = 200, msMaxIter = 200))
summary(test)
#Note that all terms are still significant in this new model. New model performs
#slightly worse than fit5, but correlation is slightly improved (-0.961)
test_ml <- update(test, method = "ML")
fit5_ml <- update(fit5, method = "ML")
anova(test_ml, fit5_ml)
test <- lme(MMSE ~ nWBV + nWBV_sq + Age + SES + nWBV * SES + Age * SES,
data = dc,
random = ~ 1 | Subject.ID,
control = lmeControl(opt = "optim", maxIter = 200, msMaxIter = 200))
summary(test)
#Dropping nWBV from random effects significantly reduces performance of this
#new model
test_ml <- update(test, method = "ML")
anova(fit5_ml, test_ml)
test <- lme(MMSE ~ nWBV + Age_sq + Age + SES + nWBV * SES + Age * SES,
data = dc,
random = ~ 1 + nWBV | Subject.ID,
control = lmeControl(opt = "optim", maxIter = 200, msMaxIter = 200))
summary(test)
#Squared age also sees improvement in correlation and performs slightly worse than
#fit5; not as much improvement as squared nWBV
test_ml <- update(test, method = "ML")
anova(fit5_ml, test_ml)
#We will proceed with the model that includes squared nWBV; call it fit6
fit6 <- lme(MMSE ~ nWBV + nWBV_sq + Age + SES + nWBV * SES + Age * SES,
data = dc,
random = ~ 1 + nWBV | Subject.ID,
control = lmeControl(opt = "optim", maxIter = 200, msMaxIter = 200))
summary(fit6)
#What if we do within subject-centering for nWBV?
fit7 <- lme(MMSE ~ nWBV + nWBV_sq + Age + SES + nWBV * SES + Age * SES,
data = dc,
random = ~ 1 + dvar(nWBV, Subject.ID) | Subject.ID,
control = lmeControl(opt = "optim", maxIter = 200, msMaxIter = 200))
summary(fit7)
#Age:SES becomes insignificant. Can we drop it?
test <- lme(MMSE ~ nWBV + nWBV_sq + Age + SES + nWBV * SES,
data = dc,
random = ~ 1 + dvar(nWBV, Subject.ID) | Subject.ID,
control = lmeControl(opt = "optim", maxIter = 200, msMaxIter = 200))
summary(test)
ml_test <- update(test, method = "ML")
ml_fit7 <- update(fit7, method = "ML")
anova(ml_test, ml_fit7)
#High p-value; but dropping makes other terms insignificant (nWBV:SES, nWBV_sq).
#Let's keep it as is for now.
#DIAGNOSTICS WITH RESIDUALS: PART 2
#-------------------------------------------------------------------------------
#fit5 has best performance followed closely by fit6
ml_fit5 <- update(fit5, method = "ML")
ml_fit6 <- update(fit6, method = "ML")
ml_fit7 <- update(fit7, method = "ML")
anova(ml_fit5, ml_fit6, ml_fit7)
summary(fit5)
summary(fit6)
summary(fit7)
fit5_tmb <- glmmTMB(
MMSE ~ nWBV + Age + SES + nWBV:SES + Age:SES + (1 + nWBV | Subject.ID),
data = dc,
REML = TRUE
)
res5 <- simulateResiduals(fittedModel = fit5_tmb)
plot(res5)
fit6_tmb <- glmmTMB(
MMSE ~ nWBV + nWBV_sq + Age + SES + nWBV * SES + Age * SES + (1 + nWBV | Subject.ID),
data = dc,
REML = TRUE
)
res6 <- simulateResiduals(fittedModel = fit6_tmb)
plot(res6)
fit7_tmb <- glmmTMB(
MMSE ~ nWBV + nWBV_sq + Age + SES + nWBV * SES + Age * SES +
(1 + dvar(nWBV, Subject.ID) | Subject.ID),
data = dc,
REML = TRUE
)
res7 <- simulateResiduals(fittedModel = fit7_tmb)
plot(res7)
#fit7 has worse quantile deviations; let's stick with fit5 and fit6.
dc$fit_vals5 <- fitted(fit5)
xyplot(MMSE ~ Age | factor(Subject.ID), data = dc,
type = "p",
xlab = "Age",
ylab = "MMSE",
main = "Observed and Fitted MMSE Trajectories per Subject",
panel = function(x, y, subscripts, ...) {
panel.xyplot(x, y, col = "black", pch = 16, ...)
fit_vals <- dc$fit_vals5[subscripts]
ord <- order(x)
panel.lines(x[ord], fit_vals[ord], col = "blue", lwd = 2)
})
dc$fit_vals6 <- fitted(fit6)
xyplot(MMSE ~ Age | factor(Subject.ID), data = dc,
type = "p",
xlab = "Age",
ylab = "MMSE",
main = "Observed and Fitted MMSE Trajectories per Subject",
panel = function(x, y, subscripts, ...) {
panel.xyplot(x, y, col = "black", pch = 16, ...)
fit_vals <- dc$fit_vals6[subscripts]
ord <- order(x)
panel.lines(x[ord], fit_vals[ord], col = "blue", lwd = 2)
})
#Both plots are fairly similar
#Centering:
dc$nWBV_c <- scale(dc$nWBV, center = TRUE, scale = FALSE)
dc$Age_c <- scale(dc$Age, center = TRUE, scale = FALSE)
dc$SES_c <- scale(dc$SES, center = TRUE, scale = FALSE)
fit5_centered <- lme(
MMSE ~ nWBV_c + Age_c + SES_c + nWBV_c:SES_c + Age_c:SES_c,
random = ~ 1 + nWBV_c | Subject.ID,
correlation = corAR1(form = ~ 1 | Subject.ID),
data = dc,
control = lmeControl(opt = "optim", maxIter = 200, msMaxIter = 200)
)
summary(fit5_centered)
test_ml <- update(fit5_centered, method ="ML")
fit5_ml <- update(fit5, method = "ML")
anova(test_ml, fit5_ml)
cent_tmb <- glmmTMB(
MMSE ~ nWBV_c + Age_c + SES_c + nWBV_c:SES_c + Age_c:SES_c + (1 + nWBV_c | Subject.ID),
data = dc,
REML = TRUE
)
#Centering for fit5 offers no improvement in residuals
cent_res <- simulateResiduals(fittedModel = cent_tmb)
plot(cent_res)
plot(res5)
#GROUPING BY CDR, VISUALIZATIONS: PART 2
#-------------------------------------------------------------------------------
xyplot(MMSE ~ Age | factor(CDR), data = dc,
type = "p",
xlab = "Age",
ylab = "MMSE",
main = "Observed and Fitted MMSE Trajectories Grouped by CDR",
panel = function(x, y, subscripts, ...) {
current_ids <- dc$Subject.ID[subscripts]
unique_ids <- unique(current_ids)
for (id in unique_ids) {
idx <- which(current_ids == id)
ord <- order(x[idx])
x_ord <- x[idx][ord]
y_ord <- y[idx][ord]
fit_ord <- dc$fit_vals5[subscripts][idx][ord]
panel.xyplot(x_ord, y_ord, col = "black", pch = 16)
panel.lines(x_ord, fit_ord, col = "blue", lwd = 1.5)
}
})
dc_slope <- dc %>%
select(Subject.ID, Age, fit_vals5, CDR) %>%
group_by(Subject.ID, CDR) %>%
arrange(Age, .by_group = TRUE) %>%
summarise(
slope = if (n() >= 2) coef(lm(fit_vals5 ~ Age))[2] else NA_real_,
.groups = "drop"
)
avg_slopes_by_CDR_5 <- dc_slope %>%
group_by(CDR) %>%
summarise(
avg_slope = mean(slope, na.rm = TRUE),
n = n()
)
print(avg_slopes_by_CDR_5)
xyplot(MMSE ~ Age | factor(CDR), data = dc,
type = "p",
xlab = "Age",
ylab = "MMSE",
main = "Observed and Fitted MMSE Trajectories Grouped by CDR",
panel = function(x, y, subscripts, ...) {
current_ids <- dc$Subject.ID[subscripts]
unique_ids <- unique(current_ids)
for (id in unique_ids) {
idx <- which(current_ids == id)
ord <- order(x[idx])
x_ord <- x[idx][ord]
y_ord <- y[idx][ord]
fit_ord <- dc$fit_vals6[subscripts][idx][ord]
panel.xyplot(x_ord, y_ord, col = "black", pch = 16)
panel.lines(x_ord, fit_ord, col = "blue", lwd = 1.5)
}
})
dc_slope <- dc %>%
select(Subject.ID, Age, fit_vals6, CDR) %>%
group_by(Subject.ID, CDR) %>%
arrange(Age, .by_group = TRUE) %>%
summarise(
slope = if (n() >= 2) coef(lm(fit_vals6 ~ Age))[2] else NA_real_,
.groups = "drop"
)
avg_slopes_by_CDR_6 <- dc_slope %>%
group_by(CDR) %>%
summarise(
avg_slope = mean(slope, na.rm = TRUE),
n = n()
)
print(avg_slopes_by_CDR_6)
#conclusion: fit6 is better since fit5 has positive slopes for 0 group
#SPLINES
#-------------------------------------------------------------------------------
dc$ns_nWBV <- ns(dc$nWBV, df = 5)
ns_basis <- ns(dc$nWBV, df = 5)
ns_df <- as.data.frame(ns_basis)
colnames(ns_df) <- paste0("ns_nWBV_", 1:ncol(ns_df))
dc <- bind_cols(dc, ns_df)
fit_spline <- lme(MMSE ~ ns_nWBV_1 + ns_nWBV_2 + ns_nWBV_3 + Age + SES + nWBV * SES + Age * SES,
random = ~ 1 + nWBV | Subject.ID,
data = dc,
method = "REML"
)
fit_spline <- lme(MMSE ~ ns_nWBV_1 + ns_nWBV_2 + ns_nWBV_3 + ns_nWBV4 + ns_nWBV_5 + Age + SES + nWBV * SES + Age * SES,
random = ~ 1 + nWBV | Subject.ID,
data = dc,
method = "REML"
)
fit_spline <- lme(MMSE ~ ns_nWBV_1 + ns_nWBV_2 + ns_nWBV_3 + ns_nWBV_4 + ns_nWBV_5 + Age + SES + nWBV * SES + Age * SES,
random = ~ 1 + nWBV | Subject.ID,
data = dc,
method = "REML"
)
fit_spline <- lme(MMSE ~ ns_nWBV_1 + ns_nWBV_2 + ns_nWBV_3 + ns_nWBV_4 + Age + SES + nWBV * SES + Age * SES,
random = ~ 1 + nWBV | Subject.ID,
data = dc,
method = "REML"
)
summary(fit_spline)
knitr::opts_chunk$set(echo = TRUE)
library(spida2)
library(p3d)
library(nlme)
library(car)
library(lattice)
library(latticeExtra)
library(dplyr)
library(glmmTMB)
library(DHARMa)
library(splines)
library(performance)
dc$ns_nWBV <- ns(dc$nWBV, df = 1)
# Check correlations between ALL predictors
cor_matrix <- cor(dc[c("nWBV", "Age", "SES")], use = "complete.obs")
print(cor_matrix)
# Look for correlations of 1.0 or -1.0
which(abs(cor_matrix) > 0.99 & cor_matrix != 1, arr.ind = TRUE)
# Check if any variables are identical
identical(dc$nWBV, dc$Age)
identical(dc$nWBV, dc$SES)
identical(dc$Age, dc$SES)
# Check variance - zero variance = constant variable
apply(dc[c("nWBV", "Age", "SES")], 2, var, na.rm = TRUE)
dc$ns_nWBV_1_SES <- dc$ns_nWBV_1 * dc$SES
dc$ns_nWBV_2_SES <- dc$ns_nWBV_2 * dc$SES
dc$ns_nWBV_3_SES <- dc$ns_nWBV_3 * dc$SES
install.packages("lmerTest")
wald( fit1 )
te <- glmmTMB(
MMSE ~ ns(nWBV_scaled, df =4) + Age + SES + nWBV_scaled*SES + Age:SES + (1 + nWBV | Subject.ID),
data = dc,
REML = TRUE
)
dc$nWBV_scaled <- scale(dc$nWBV)[,1]
te <- glmmTMB(
MMSE ~ ns(nWBV_scaled, df =4) + Age + SES + nWBV_scaled*SES + Age:SES + (1 + nWBV | Subject.ID),
data = dc,
REML = TRUE
)
re <- simulateResiduals(fittedModel = te)
plot(te)
fit_spline_tmb <- glmmTMB(
MMSE ~ ns_nWBV_1 + ns_nWBV_2 + ns_nWBV_3 + Age + SES + nWBV * SES + Age * SES
+ (1 + nWBV | Subject.ID),
data = dc,
REML = TRUE
)
res_spline <- simulateResiduals(fit_spline_tmb)
plot(res_spline)
